// Generated by CoffeeScript 1.6.3
(function() {
  var cache, port, replacer, safeStringify;

  port = chrome.runtime.connect({
    name: "lttools"
  });

  cache = [];

  replacer = function(key, value) {
    var _ref;
    if (cache.length > 20) {
      return;
    }
    if (window.jQuery && value instanceof jQuery) {
      return "[jQuery $(" + value.selector + ")]";
    }
    if (value instanceof Element) {
      return "[Element " + value.tagName.toLowerCase() + ((_ref = value.id !== "") != null ? _ref : {
        "#": ""
      }) + value.id + "]";
    }
    if (typeof value === "object") {
      if (cache.indexOf(value) > -1) {
        return "circular";
      }
      cache.push(value);
      return value;
    }
    if (typeof value === "function") {
      return "[function]";
    }
    return value;
  };

  safeStringify = function(res) {
    cache = [];
    return JSON.stringify(res, replacer);
  };

  window.addEventListener("message", function(event) {
    var action, ev, expression, final, id, meta, obj, params, _ref, _ref1;
    console.log(event);
    _ref = event.data, action = _ref.action, params = _ref.params;
    if (action === "lttools.watch") {
      meta = params.opts;
      expression = params.expression, (_ref1 = params.opts, ev = _ref1.ev, id = _ref1.id, obj = _ref1.obj);
      if (ev === "editor.eval.cljs.watch") {
        final = cljs.core.pr_str(expression);
      } else {
        meta["no-inspect"] = true;
        final = safeStringify(expression);
      }
      console.log("result", final);
      console.log("lol");
      return port.postMessage({
        data: [
          obj, ev, {
            result: final,
            meta: meta
          }
        ]
      });
    }
  });

}).call(this);

/*
//@ sourceMappingURL=lttools.map
*/
